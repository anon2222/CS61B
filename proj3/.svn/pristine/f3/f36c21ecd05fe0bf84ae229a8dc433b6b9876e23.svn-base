package graph;

import java.util.TreeSet;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Arrays;
import static java.util.Arrays.asList;

/* See restrictions in Graph.java. */

/** A partial implementation of Graph containing elements common to
 *  directed and undirected graphs.
 *
 *  @author Bo Liu
 */
abstract class GraphObj extends Graph {

    /** A new, empty Graph. */
    GraphObj() {
        _adjList = new LinkedList<TreeSet<Integer>>();
        _edges = new LinkedList<ArrayList<Integer>>();
    }

    @Override
    public int vertexSize() {
        int size = 0;
        for (int i = 0; i < _adjList.size(); i += 1) {
            if (_adjList.get(i) != null) {
                size += 1;
            }
        }
        return size;
    }

    @Override
    public int maxVertex() {
        for (int i = _adjList.size(); i > 0; i -= 1) {
            if (_adjList.get(i - 1) != null) {
                return i;
            }
        }
        return 0;
    }

    @Override
    public int edgeSize() {
        return _edges.size();
    }

    @Override
    public abstract boolean isDirected();

    @Override
    public int outDegree(int v) {
        if (contains(v)) {
            if (_adjList.get(v - 1) == null) {
                return 0;
            } else {
                return _adjList.get(v - 1).size();
            }
        }
        return 0;
    }

    @Override
    public abstract int inDegree(int v);

    @Override
    public boolean contains(int u) {
        return mine(u);
    }

    @Override
    public boolean contains(int u, int v) {
        if (contains(u)) {
            if (isDirected()){
                return _adjList.get(u - 1).contains(v);
            } else {
                return _adjList.get(u - 1).contains(v)
                || _adjList.get(v - 1).contains(u);
            }
        }
        return false;
    }

    @Override
    public int add() {
        int i;
        for (i = 0; i < _adjList.size(); i += 1) {
            if (_adjList.get(i) == null) {
                _adjList.set(i, new TreeSet<Integer>());
                return i + 1;
            }
        }
        _adjList.add(new TreeSet<Integer>());
        return i + 1;
    }

    @Override
    public int add(int u, int v) {
        if (mine(u) && mine(v) && !contains(u, v)) {
            if (isDirected()) {
                addHelper(u, v);
            } else {
                if (_adjList.get(v - 1).contains(u)) {
                }  else {
                    addHelper(u, v);
                }
            }
        }
        return u;
    }

    /** A helper method adding edge(U, V) to the graph. */
    private void addHelper(int u, int v) {
        _adjList.get(u - 1).add(v);
        _edges.add(new ArrayList<Integer>());
        _edges.get(u - 1).add(u);
        System.out.print("the 0th is" + _edges.get(u - 1).get(0));
        System.out.println();
        _edges.get(u - 1).add(v);
        System.out.print("the 1st is" + _edges.get(u - 1).get(1));
        System.out.println();

    }

    @Override
    public void remove(int v) {
        for (int i = 0; i < _adjList.size(); i += 1) {
            if (_adjList.get(i) != null) {
                if(_adjList.get(i).contains(v)){
                   _adjList.get(i).remove(v);
                }
            }
        }
        _adjList.set(v - 1, null);
    }

    @Override
    public void remove(int u, int v) {
        if(!isDirected() && !_adjList.get(u - 1).contains(v)) {
            _adjList.get(v - 1).remove(u);
        } else {
            _adjList.get(u - 1).remove(v);
        }
    }

    @Override
    public Iteration<Integer> vertices() {
        LinkedList<Integer> temp = new LinkedList<Integer>();
        for (int i = 0; i < _adjList.size(); i += 1) {
            if (_adjList.get(i) != null) {
                temp.add(i + 1);
            }
        }
        return Iteration.iteration(temp);
    }

    @Override
    public int successor(int v, int k) {
        if (contains(v)) {
            for (int i : _adjList.get(v - 1)) {
                if (k == 0) {
                    return i;
                } else {
                    k -= 1;
                }
            }
        }
        return 0;
    }

    @Override
    public abstract int predecessor(int v, int k);

    @Override
    public Iteration<Integer> successors(int v) {
        return Iteration.iteration(_adjList.get(v - 1));
    }

    @Override
    public abstract Iteration<Integer> predecessors(int v);

    @Override
    public Iteration<int[]> edges() {
        ArrayList<int[]> temp = new ArrayList<int[]>();
        for (int i = 0; i < _edges.size(); i += 1) {
            temp.add(new int[]{_edges.get(i).get(0), _edges.get(i).get(1)});
        }
        return Iteration.iteration(temp);
    }

    @Override
    protected boolean mine(int v) {
        return (v <= _adjList.size()) && (_adjList.get(v - 1) != null);
    }

    @Override
    protected void checkMyVertex(int v) {
        if (!mine(v)) {
            throw new Error("the vertex is not in the graph");
        }
    }

    @Override
    protected int edgeId(int u, int v) {
        if (_edges.get(u - 1) != null) {
            return _edges.indexOf(u);
        }
        return 0;
    }

    /** An adjacency list for graph. */
    private LinkedList<TreeSet<Integer>> _adjList;

    /** A list storing graph edges. */
    private LinkedList<ArrayList<Integer>> _edges;

}
