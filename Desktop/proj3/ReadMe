Project 3: Fun with Graphs

For this final project, you will be writing a library package to provide facilities for manipulating
graphs, plus two clients that use the package. The package must be general: no specifics
of either client may find their way into the code for the graph package. We will check that
by running our own clients against your package. That is, in contrast to past projects where
we didn’t care how you arranged the internals of your program as long as it functioned according
to the specification, in this case, part of the project code—the API for the graph
package—will be set in stone.



Files:

Makefile:      Does standard tasks such as building the application,
               cleaning up unneeded files, running tests, and
               performing style checks.  Used as a configuration file by 
               the 'gmake' program.

staff-version:
               A file containing just the name of the current public release
               version in the public/proj1/tags directory.  (Helpful when
               trying to figure out what merges to do.)

graph/  Package containing general graph-related data types.
               
        Makefile:
               See above.
               
        Graph.java:
               Interface defining what a "graph" is.
               
        GraphObj.java:
               A non-public partial implementation of Graph.java containing
               code common to directed and undirected graphs.

        DirectedGraph.java:
               Implementation of directed graphs.
               
        UndirectedGraph.java:
               Implementation of undirected graphs.
               
        GraphFilter.java:
               A utility implementation of Graphs (intended to be extended)
               that simply delegates all operations to a previously existing
               Graph.  Used by LabeledGraph.

        LabeledGraph.java:
               A graph that adds labels to vertices and edges of a previously
               existing Graph.

        Traversal.java:
               Represents a general traversal of a graph.

        BreadthFirstTraversal.java:
               An implementation of Traversal for breadth-first traversal.

        DepthFirstTraversal.java:
               An implementation of Traversal for depth-first traversal.

        ShortestPaths.java:
               Represents a shortest-path tree or single shortest path on
               a graph, using Dijkstra's algorithms and A* search.

        SimpleShortestPaths.java:
               An implementation of ShortestPaths.java that provides weighting
               information separately from the underlying Graph.

        Iteration.java:
               Abstract class that allows Iterators to be used in foreach
	       loops (for (T x : E) { ... }).

        Test-related:
               
        UnitTest.java:
                Dispatcher for JUnit tests for graph package.

        GraphTesting.java:
                A sample unit-testing file intended for basic graph structure.

make/   Package containing the 'make' application.

        Makefile:
                See above.

        Main.java:    Contains main program for 'make'.

        Depends.java: Dependency graph definition.

        Maker.java:   Contains main logic for 'make' application.

        Rule.java:    Describes a makefile rule

        UnitTest.java:
                JUnit tests for make package
               
trip/   Package containing the 'trip' application.

        Makefile:
                See above.

        Main.java:       Contains main program for 'trip'.

        Direction.java:  Describes directions (NS, WE, etc.)

        Location.java:   Describes a location on a map.

        Road.java:       Describes a road between two Locations.

        Trip.java:       Contains driver logic for 'trip' application.

        UnitTest.java:
                JUnit tests for trip package


testing/  Files related to integration tests

        testing.py:  Common definitions for tester.py files

        make/        Tests for make application
               tester.py:    Tester for make
               *.mk:         Test makefiles
               *.dir:        Test file information
               *.in:         Test make targets
               *.out:        Expected outputs
               *.err:        Expected error outputs

        trip/        Tests for trip application
               tester.py:    Tester for make
               *.mk:         Test makefiles
               *.dir:        Test file information
               *.in:         Test make targets
               *.out:        Expected outputs
               *.err:        Expected error outputs


